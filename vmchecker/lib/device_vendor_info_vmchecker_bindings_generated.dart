// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/device_vendor_info_vmchecker.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class DeviceVendorInfoVmcheckerBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DeviceVendorInfoVmcheckerBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DeviceVendorInfoVmcheckerBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Determine the running platform is under hypervisor mode, which
  /// denotes this program is executed inside of virtual machine or container
  /// rather than a real, physical machine.
  bool is_hypervisor() {
    return _is_hypervisor();
  }

  late final _is_hypervisorPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>('is_hypervisor');
  late final _is_hypervisor = _is_hypervisorPtr.asFunction<bool Function()>();
}
